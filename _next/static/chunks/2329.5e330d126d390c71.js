"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2329],{22329:(e,r,i)=>{i.d(r,{getProviderConfig:()=>o,getProviders:()=>d});let t=[];class s{async getLLM(){if(!this.llm){let e=(await i.e(9022).then(i.bind(i,56068))).default;this.llm=new e}return this.llm}initialize(){try{let e=t;return e&&(this.providers=e),!0}catch(e){return console.error("Failed to initialize LLM service:",e),!1}}getProviders(){return this.providers}addProvider(e){let r=this.providers.findIndex(r=>r.id===e.id);r>=0?this.providers[r]=e:this.providers.push(e),t=this.providers}removeProvider(e){this.providers=this.providers.filter(r=>r.id!==e),t=this.providers}async sendMessage(e,r,i,t){let s=this.providers.find(e=>e.id===r);if(!s)throw Error("Provider ".concat(r," not found"));let d={service:"openai",model:i,apiKey:s.apiKey,stream:!0};s.baseUrl&&(d.baseUrl=s.baseUrl);let o=await this.getLLM();return t&&o.system(t),o.chat(e,d)}getModels(e){let r=this.providers.find(r=>r.id===e);return r&&r.model?[r.model]:[]}constructor(){this.providers=[],this.llm=null}}async function d(){let e=t;if(e&&e.length>0)return e;try{let{getAllProviders:e}=await Promise.resolve().then(i.bind(i,12857));return await e()||[]}catch(e){return console.error("Failed to get providers from IndexedDB:",e),[]}}function o(e){return(t||[]).find(r=>r.id===e)||null}new s}}]);